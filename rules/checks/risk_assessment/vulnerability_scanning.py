class VulnerabilityScanningCheck:
    def check_aws(self, data):
        """Check AWS vulnerability scanning and security monitoring capabilities"""
        cloudwatch_data = None
        cloudtrail_data = None
        ec2_data = {}
        
        # Find relevant data across regions
        for region, region_data in data.items():
            if 'cloudwatch' in region_data:
                cloudwatch_data = region_data['cloudwatch']
            if 'cloudtrail' in region_data:
                cloudtrail_data = region_data['cloudtrail']
            if 'ec2' in region_data:
                ec2_data[region] = region_data['ec2']

        if not cloudwatch_data and not cloudtrail_data and not ec2_data:
            return {
                "status": "NON_COMPLIANT",
                "details": "No AWS data found for vulnerability scanning analysis"
            }

        # Analyze vulnerability scanning capabilities
        scanning_indicators = []
        scanning_issues = []
        
        # Check CloudWatch for security monitoring
        if cloudwatch_data:
            alarms = cloudwatch_data.get('alarms', {})
            log_groups = cloudwatch_data.get('log_groups', {})
            metrics = cloudwatch_data.get('metrics', {})
            
            # Check for security-related alarms
            security_alarms = []
            for alarm_name, alarm_data in alarms.items():
                alarm_description = alarm_data.get('alarm_description', '').lower()
                if any(keyword in alarm_description for keyword in ['vulnerability', 'security', 'threat', 'malware', 'scan']):
                    security_alarms.append(alarm_name)
            
            if security_alarms:
                scanning_indicators.append(f"{len(security_alarms)} security monitoring alarms")
            else:
                scanning_issues.append("No security monitoring alarms found")
            
            # Check for security-related log groups
            security_log_groups = []
            for log_group_name in log_groups.keys():
                if any(keyword in log_group_name.lower() for keyword in ['security', 'vulnerability', 'scan', 'threat', 'malware']):
                    security_log_groups.append(log_group_name)
            
            if security_log_groups:
                scanning_indicators.append(f"{len(security_log_groups)} security-related log groups")
            else:
                scanning_issues.append("No security-related log groups found")
            
            # Check for metrics (indicates monitoring infrastructure)
            if metrics:
                metric_count = sum(len(metric_list) for metric_list in metrics.values())
                scanning_indicators.append(f"{metric_count} CloudWatch metrics for monitoring")
            else:
                scanning_issues.append("No CloudWatch metrics found")
        
        # Check CloudTrail for security event monitoring
        if cloudtrail_data:
            trails = cloudtrail_data.get('trails', {})
            
            # Check for comprehensive logging
            trails_with_global_events = [trail for trail in trails.values() if trail.get('include_global_service_events', False)]
            if trails_with_global_events:
                scanning_indicators.append(f"{len(trails_with_global_events)} trails with global service events")
            else:
                scanning_issues.append("No CloudTrail trails with global service events")
            
            # Check for log file validation
            trails_with_validation = [trail for trail in trails.values() if trail.get('log_file_validation_enabled', False)]
            if trails_with_validation:
                scanning_indicators.append(f"{len(trails_with_validation)} trails with log file validation")
            else:
                scanning_issues.append("No CloudTrail log file validation")
            
            # Check for CloudTrail Insights
            trails_with_insights = [trail for trail in trails.values() if trail.get('has_insight_selectors', False)]
            if trails_with_insights:
                scanning_indicators.append(f"{len(trails_with_insights)} trails with CloudTrail Insights")
            else:
                scanning_issues.append("No CloudTrail Insights configured")
        
        # Check EC2 for security group and network security
        if ec2_data:
            total_instances = 0
            instances_with_security_groups = 0
            instances_with_public_access = 0
            
            for region, region_ec2 in ec2_data.items():
                instances = region_ec2.get('instances', {})
                security_groups = region_ec2.get('security_groups', {})
                
                for instance_id, instance_data in instances.items():
                    # Handle case where instance_data might be a string
                    if isinstance(instance_data, str):
                        continue
                    
                    # if instance_data.get('state', {}).get('name') in ['running', 'stopped']:
                    #     total_instances += 1
                        
                    #     # Check for security groups
                    #     instance_security_groups = instance_data.get('security_groups', [])
                    #     if instance_security_groups:
                    #         instances_with_security_groups += 1
                        
                    #     # Check for public access
                    #     if instance_data.get('public_ip_address') or instance_data.get('public_dns_name'):
                    #         instances_with_public_access += 1
            
            if total_instances > 0:
                scanning_indicators.append(f"{total_instances} EC2 instances")
                
                if instances_with_security_groups > 0:
                    scanning_indicators.append(f"{instances_with_security_groups} instances with security groups")
                else:
                    scanning_issues.append("No instances with security groups")
                
                if instances_with_public_access > 0:
                    scanning_issues.append(f"{instances_with_public_access} instances with public access")
            else:
                scanning_indicators.append("No EC2 instances found")

        # Determine compliance status
        if scanning_issues:
            status = "NON_COMPLIANT"
            details = f"Vulnerability scanning issues: {', '.join(scanning_issues)}"
        elif len(scanning_indicators) < 4:
            status = "PARTIAL"
            details = f"Basic vulnerability scanning capabilities. {', '.join(scanning_indicators)}"
        else:
            status = "COMPLIANT"
            details = f"Comprehensive vulnerability scanning capabilities. {', '.join(scanning_indicators)}"

        return {
            "status": status,
            "details": details
        }

    def check_google_workspace(self, data):
        # TODO: Implement Google Workspace-specific logic
        return {
            "status": "NOT_IMPLEMENTED",
            "details": "Google Workspace vulnerability scanning check not implemented"
        } 