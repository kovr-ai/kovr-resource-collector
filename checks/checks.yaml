# GitHub-specific checks configuration
# Maps to Check model structure in checks/models.py

checks:
  - name: "github_main_branch_protected"
    description: "Verify that the main branch in GitHub repository has protection enabled"
    field_path: "branches"
    operation:
      name: "custom"
      custom_logic: |
        # Check if the main branch (or master branch) is protected
        if not isinstance(fetched_value, list):
            result = False
        else:
            result = False  # Default to False if main branch not found
            main_branch_names = ['main', 'master']  # Common main branch names
            
            for branch in fetched_value:
                branch_name = None
                is_protected = False
                
                if isinstance(branch, dict):
                    branch_name = branch.get('name', '')
                    is_protected = branch.get('protected', False)
                else:
                    # Handle Pydantic models
                    branch_name = getattr(branch, 'name', '')
                    is_protected = getattr(branch, 'protected', False)
                
                # Check if this is a main branch
                if branch_name in main_branch_names:
                    result = is_protected
                    break  # Found main branch, stop looking
    expected_value: null
    tags: ["security", "github", "branch_protection", "main_branch"]
    severity: "high"
    category: "access_control"

  - name: "github_repository_not_private"
    description: "Verify that GitHub repository is public (not private)"
    field_path: "basic_info"
    operation:
      name: "custom"
      custom_logic: |
        # Check if repository is NOT private (i.e., it's public)
        if isinstance(fetched_value, dict):
            private_status = fetched_value.get('private', True)
            result = not private_status  # Pass if not private (i.e., public)
        else:
            # Handle Pydantic models
            private_status = getattr(fetched_value, 'private', True)
            result = not private_status
    expected_value: null
    tags: ["security", "github", "visibility"]
    severity: "medium"
    category: "access_control"

  - name: "github_minimum_branch_count"
    description: "Verify that GitHub repository has at least 2 branches"
    field_path: "branches"
    operation:
      name: "custom"
      custom_logic: |
        # Check if repository has at least 3 branches
        if isinstance(fetched_value, list):
            branch_count = len(fetched_value)
            result = branch_count >= 3
        else:
            result = False
    expected_value: null
    tags: ["development", "github", "branch_management"]
    severity: "low"
    category: "development_practices" 