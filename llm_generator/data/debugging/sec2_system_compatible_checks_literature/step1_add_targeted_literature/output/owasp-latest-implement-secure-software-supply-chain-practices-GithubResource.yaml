resource:
  check:
    unique_id: owasp-latest-implement-secure-software-supply-chain-practices
  field_paths:
  - actions_data
  - actions_data.active_workflows
  - actions_data.recent_runs_count
  - actions_data.total_workflows
  - actions_data.workflows
  - security_data
  - security_data.code_scanning_alerts
  - security_data.dependency_graph
  - security_data.security_advisories
  - security_data.security_analysis
  - security_data.security_features_enabled
  - security_data.total_code_scanning_alerts
  - security_data.total_dependabot_alerts
  - security_data.vulnerability_alerts
  fix_details:
    automation_available: true
    description: 'If the repository lacks adequate security controls and practices
      for the software supply chain, the following steps can be taken to remediate
      the issue:'
    estimated_time: 1-2 weeks
    instructions:
    - Implement continuous integration workflows with secure coding practices and
      automated testing.
    - Enable code scanning and dependency analysis to identify vulnerabilities and
      outdated dependencies.
    - Configure vulnerability alerts and establish a process for triaging and addressing
      identified vulnerabilities.
    - Implement secure access controls and authentication mechanisms for the software
      supply chain.
    - Establish a software bill of materials (SBOM) to track and manage third-party
      components and dependencies.
  is_valid: true
  literature: The GitHub resource contains information related to the security practices
    and controls implemented for the software supply chain of the repository. This
    includes details about the workflows and actions used for continuous integration
    and deployment, as well as security features like code scanning, dependency analysis,
    and vulnerability alerts. By analyzing this data, organizations can assess their
    adherence to secure software supply chain practices and identify potential gaps
    or areas for improvement.
  name: GithubResource
  output_statements:
    failure: The repository lacks adequate security controls and practices for the
      software supply chain, putting it at risk of potential threats and vulnerabilities.
    partial: The repository has implemented some secure software supply chain practices,
      but there are gaps or areas that need improvement.
    success: The repository has implemented secure software supply chain practices,
      including continuous integration workflows, code scanning, dependency analysis,
      and vulnerability management.
  reason: The GitHub resource provides valuable information about the security practices
    and controls implemented for the software supply chain of the repository. This
    includes details about the workflows and actions used for continuous integration
    and deployment, as well as security features like code scanning, dependency analysis,
    and vulnerability alerts. By analyzing this data, organizations can assess their
    adherence to secure software supply chain practices and identify potential gaps
    or areas for improvement.
