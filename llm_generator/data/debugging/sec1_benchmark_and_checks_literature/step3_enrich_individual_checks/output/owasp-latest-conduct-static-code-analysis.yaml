check:
  benchmarks:
  - confidence: 0.7
    reason: Static code analysis can help detect and mitigate vulnerabilities that
      could be exploited through command and scripting interpreters, which is a technique
      used in this ATT&CK technique.
    unique_id: MITRE-ATT&CK-T1059
  - confidence: 0.8
    reason: Static code analysis can help identify and remediate vulnerabilities related
      to insecure coding practices, which could be exploited through this ATT&CK technique.
    unique_id: MITRE-ATT&CK-T1190
  category: system_integrity
  controls:
  - confidence: 0.9
    reason: This control requires organizations to employ code analysis tools to identify
      software vulnerabilities, which aligns with the purpose of conducting static
      code analysis.
    unique_id: NIST-800-53-SI-10
  - confidence: 0.8
    reason: This control requires organizations to establish and maintain policies
      and procedures for secure development, which includes the use of static code
      analysis tools.
    unique_id: ISO-27001-A.14.2.1
  literature: Static code analysis is the process of analyzing source code without
    executing it, to detect potential vulnerabilities, coding errors, and deviations
    from best practices. It is an essential practice in software development to identify
    and mitigate security risks early in the software development life cycle (SDLC).
    By conducting static code analysis, developers can identify and remediate issues
    such as insecure coding practices, use of deprecated or vulnerable libraries,
    and potential entry points for attacks. This check ensures that the latest version
    of the OWASP static code analysis tool is used, which includes the most up-to-date
    vulnerability detection rules and best practices.
  severity: high
  tags:
  - static_analysis
  - code_quality
  - vulnerability_management
  - secure_coding
  unique_id: owasp-latest-conduct-static-code-analysis
